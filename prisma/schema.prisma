// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  journalEntries JournalEntry[]
  settings      Settings?
  subscription  Subscription?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id             String   @id @default(cuid())
  userId         String   @unique
  fullName       String
  email          String
  avatarUrl      String?
  membershipTier String   @default("free") // free, pro, premium
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JournalEntry {
  id        String   @id @default(cuid())
  userId    String
  content   String   @db.Text
  voiceUrl  String?
  mood      String?
  tags      String[] // Array of tags
  summary   String?  @db.Text
  chunks    String[] // Array of text chunks for embeddings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([mood])
  @@index([tags])
}

model Settings {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  aiMemoryEnabled         Boolean  @default(true)
  moodAnalysisEnabled     Boolean  @default(true)
  summaryGenerationEnabled Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                 String   @id @default(cuid())
  userId             String   @unique
  stripeCustomerId   String?  @unique
  stripeSubscriptionId String? @unique
  plan               String   @default("free") // free, pro, premium
  status             String   @default("active") // active, canceled, past_due, etc.
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
} 